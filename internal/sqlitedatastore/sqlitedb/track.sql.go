// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: track.sql

package sqlitedb

import (
	"context"
	"database/sql"
)

const deleteTrackByID = `-- name: DeleteTrackByID :exec
delete from tracks where id = ?1
`

func (q *Queries) DeleteTrackByID(ctx context.Context, id []byte) error {
	_, err := q.db.ExecContext(ctx, deleteTrackByID, id)
	return err
}

const getTrackByID = `-- name: GetTrackByID :one
select id, created_at, name, path, type_id from tracks where id = ?1
`

func (q *Queries) GetTrackByID(ctx context.Context, id []byte) (Track, error) {
	row := q.db.QueryRowContext(ctx, getTrackByID, id)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Path,
		&i.TypeID,
	)
	return i, err
}

const getTracks = `-- name: GetTracks :many
select id, created_at, name, path, type_id from tracks
`

func (q *Queries) GetTracks(ctx context.Context) ([]Track, error) {
	rows, err := q.db.QueryContext(ctx, getTracks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Track
	for rows.Next() {
		var i Track
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Name,
			&i.Path,
			&i.TypeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const saveTrack = `-- name: SaveTrack :exec
insert into tracks (id, created_at, name, path, type_id) values (?1, ?2, ?3, ?4, ?5)
`

type SaveTrackParams struct {
	ID        []byte
	CreatedAt string
	Name      string
	Path      string
	TypeID    []byte
}

func (q *Queries) SaveTrack(ctx context.Context, arg SaveTrackParams) error {
	_, err := q.db.ExecContext(ctx, saveTrack,
		arg.ID,
		arg.CreatedAt,
		arg.Name,
		arg.Path,
		arg.TypeID,
	)
	return err
}

const updateTrack = `-- name: UpdateTrack :one
update tracks
set
  name = coalesce(?1, name),
  type_id = coalesce(?2, type_id)
where id = ?3
returning id, created_at, name, path, type_id
`

type UpdateTrackParams struct {
	Name   sql.NullString
	TypeID []byte
	ID     []byte
}

func (q *Queries) UpdateTrack(ctx context.Context, arg UpdateTrackParams) (Track, error) {
	row := q.db.QueryRowContext(ctx, updateTrack, arg.Name, arg.TypeID, arg.ID)
	var i Track
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Path,
		&i.TypeID,
	)
	return i, err
}
