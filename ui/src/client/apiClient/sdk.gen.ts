// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { PostApiV1LoginData, PostApiV1LoginResponse, PostApiV1LoginError, PostApiV1JoinData, PostApiV1JoinResponse, GetApiV1AuthStatusData, GetApiV1AuthStatusResponse, PostApiV1AuthLogoutData, GetApiV1FilesData, GetApiV1FilesResponse, PostApiV1FilesData, DeleteApiV1FilesByTrackIdData, PutApiV1FilesByTrackIdData, PutApiV1FilesByTrackIdResponse, GetApiV1JoinTokenData, GetApiV1JoinTokenResponse, GetApiV1StreamByPathData, GetApiV1StreamByPathResponse, GetApiV1TrackTypesData, GetApiV1TrackTypesResponse, GetApiV1WsData } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Authenticate user
 */
export const postApiV1Login = <ThrowOnError extends boolean = false>(options: Options<PostApiV1LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1LoginResponse, PostApiV1LoginError, ThrowOnError>({
        url: '/api/v1/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Join as player using a token
 */
export const postApiV1Join = <ThrowOnError extends boolean = false>(options: Options<PostApiV1JoinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiV1JoinResponse, unknown, ThrowOnError>({
        url: '/api/v1/join',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get current authentication status
 */
export const getApiV1AuthStatus = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1AuthStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1AuthStatusResponse, unknown, ThrowOnError>({
        url: '/api/v1/auth/status',
        ...options
    });
};

/**
 * Logout current user
 */
export const postApiV1AuthLogout = <ThrowOnError extends boolean = false>(options?: Options<PostApiV1AuthLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        url: '/api/v1/auth/logout',
        ...options
    });
};

/**
 * List all audio tracks
 */
export const getApiV1Files = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1FilesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1FilesResponse, unknown, ThrowOnError>({
        url: '/api/v1/files',
        ...options
    });
};

/**
 * Upload new audio track
 */
export const postApiV1Files = <ThrowOnError extends boolean = false>(options: Options<PostApiV1FilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/v1/files',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Delete an audio track
 */
export const deleteApiV1FilesByTrackId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiV1FilesByTrackIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        url: '/api/v1/files/{trackID}',
        ...options
    });
};

/**
 * Update audio track information
 */
export const putApiV1FilesByTrackId = <ThrowOnError extends boolean = false>(options: Options<PutApiV1FilesByTrackIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiV1FilesByTrackIdResponse, unknown, ThrowOnError>({
        url: '/api/v1/files/{trackID}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a new join token for players
 */
export const getApiV1JoinToken = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1JoinTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1JoinTokenResponse, unknown, ThrowOnError>({
        url: '/api/v1/join-token',
        ...options
    });
};

/**
 * Stream audio content
 */
export const getApiV1StreamByPath = <ThrowOnError extends boolean = false>(options: Options<GetApiV1StreamByPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiV1StreamByPathResponse, unknown, ThrowOnError>({
        url: '/api/v1/stream/{path}',
        ...options
    });
};

/**
 * Get available track types
 */
export const getApiV1TrackTypes = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1TrackTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiV1TrackTypesResponse, unknown, ThrowOnError>({
        url: '/api/v1/trackTypes',
        ...options
    });
};

/**
 * WebSocket connection for real-time updates
 */
export const getApiV1Ws = <ThrowOnError extends boolean = false>(options?: Options<GetApiV1WsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        url: '/api/v1/ws',
        ...options
    });
};